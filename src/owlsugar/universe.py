"""
:Copyright: |copy| 2008 by Adrian Hare and Kenneth Barber.

.. |copy| unicode:: 0xA9 .. copyright sign

:license: 
    This file is part of OWLSugar.

    OWLSugar is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OWLSugar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

:Version: $Rev$

"""

__docformat__ = 'restructuredtext en'
__version__ = '$Rev$'


class OwlUniverse(object):
    """An OWL universe is a global area for working with owlsugar constructs.
    
    You must initialise an OwlUniverse object when starting your application.
    
    After that, you can use the get_universe() static method to grab the 
    object.
    
    """

    
#----------------------------------------------------- Initiators and factories

    
    def __init__(self):
        """Create a new universe object, and make it the global default from
        here on in.
        
        Prepare the necessary universe-wide repositories:
        
        * Classes dictionary: This is generated by introspecting the 
            "owlsugar.functional.dynamic" name space.
        * Object dictionary: Simply create a blank dictionary to be populated.
        
        """
        # Globals
        globals()['__owl_universe__'] = self
        
        # Copy the class dictionary
        import owlsugar.constructs
        self._class_dict = owlsugar.constructs._owlclasses.copy()
                
        # Create the object data structures
        self._object_dict = dict()
           

    @staticmethod
    def get_universe():
        """This is a static method to retrieve the existing universe from its
        global variable. 
        
            Returns: Pre-instantiated Universe object.
        
        """
        if globals().has_key('__owl_universe__'):
            return globals()['__owl_universe__']
        else:
            raise Exception("Cannot retrieve the universe object. " \
                "Instantiate a universe first.")


#----------------------------------------------------------- Class Manipulation


    def get_class(self, classname):
        """Get a particular OWL class.
        
            classname: classname to search for
            Returns: class object
            
        """
        return self.get_classes()[classname]

    
    def get_classes(self):
        """Get all OWL function classes.
        
            Returns: a copy of the dictionary of classes (key=name, 
                value=class object)
            
        """
        return self._class_dict.copy()

    
#---------------------------------------------------------- Object Manipulation

    
    def add_object(self, obj):
        """Add an object to the universe.
        
            object: the object to add to this universes object repository.
            
        """
        if self._object_dict.has_key(obj.id()):
            self._object_dict[obj.id()].add(obj)
        else:
            self._object_dict[obj.id()] = set([obj])        
    
    
    def get_objects(self, classname):
        """Return objects of a certain class name. 
        
            classname: classname to search for
            Returns: a list of objects
            
        """
        objects = []
        
        classes = self.get_class(classname).child_classes()
        classes.append(classname)
        for i in classes:
            
            if self._object_dict.has_key(i):
                objects.extend(list(self._object_dict[i]))
        
        return objects
    
    def del_object(self, object):
        """Delete an object from the universe.
        
            object: the object to remove from this universes object repository.
            
        """
        if self._object_dict.has_key(object.fname()):
            self._object_dict[object.fname()].remove(object)
        else:
            raise Exception("Attempt to remove an object that does not " \
                "exist in the universal objected repository.")
    